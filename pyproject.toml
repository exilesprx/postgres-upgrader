[project]
name = "postgres-upgrader"
version = "0.3.1"
description = "A specialized tool for managing PostgreSQL upgrades in Docker Compose environments"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Exiles.prx", email = "your-email@example.com"}]
keywords = ["postgresql", "docker", "docker-compose", "database", "upgrade", "migration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.13"
dependencies = [
    "docker>=7.1.0",
    "inquirer>=3.4.1",
    "pyyaml>=6.0.3",
    "rich>=14.1.0",
]

[project.scripts]
postgres-upgrader = "postgres_upgrader.__main__:main"
pg-upgrader = "postgres_upgrader.__main__:main"

[project.urls]
Homepage = "https://github.com/exilesprx/postgres-upgrader"
Repository = "https://github.com/exilesprx/postgres-upgrader"
Issues = "https://github.com/exilesprx/postgres-upgrader/issues"
Documentation = "https://github.com/exilesprx/postgres-upgrader#readme"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
src = ["src"]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101", "PLR2004"]  # Allow unused args, asserts, magic values in tests

[tool.ruff.lint.isort]
known-first-party = ["postgres_upgrader"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --strict-markers --strict-config"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests"
]

[tool.coverage.run]
source = ["postgres_upgrader"]
branch = true
omit = [
    "tests/*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "ruff>=0.13.2",
    "mypy>=1.8.0",
    "types-pyyaml>=6.0.12",
    "pre-commit>=3.6.0",
    "types-docker>=7.1.0.20251009",
]

[tool.mypy]
python_version = "3.13"
packages = ["postgres_upgrader"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
# Keep ignore_missing_imports for third-party libraries without stubs
ignore_missing_imports = true
